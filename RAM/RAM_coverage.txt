Coverage Report by instance with details

=================================================================================
=== Instance: /top/ram_if
=== Design Unit: work.ram_interface
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         44        44         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/ram_if --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 
                                          din[9-0]           1           1      100.00 
                                         dout[7-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          rx_valid           1           1      100.00 
                                          tx_valid           1           1      100.00 

Total Node Count     =         22 
Toggled Node Count   =         22 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (44 of 44 bins)

=================================================================================
=== Instance: /top/DUT
=== Design Unit: work.Dual_port_RAM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        14        14         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Dual_port_RAM.v
------------------------------------IF Branch------------------------------------
    14                                      4084     Count coming in to IF
    14              1                        167     	if (!rst_n) begin
    20              1                       3917     	else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    22                                      3917     Count coming in to IF
    22              1                       3218         if(rx_valid==1)begin
                                             699     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    23                                      3218     Count coming in to IF
    23              1                       2293             if(din[9]==0)begin
                                             925     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    25                                      2293     Count coming in to IF
    25              1                        955                   if(din[8]==0)begin
    29              1                       1338                    else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    34                                      3218     Count coming in to IF
    34              1                        925             if(din[9]==1)begin
                                            2293     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    35                                       925     Count coming in to IF
    35              1                        514                 if (din[8]==0) begin
                                             411     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    42                                      3917     Count coming in to IF
    42              1                        514         if(din[9:8]==2'b11)begin
    48              1                       3403         else 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT --

  File Dual_port_RAM.v
----------------Focused Condition View-------------------
Line       42 Item    1  (din[9:8] == 3)
Condition totals: 1 of 1 input term covered = 100.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (din[9:8] == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (din[9:8] == 3)_0     -                             
  Row   2:          1  (din[9:8] == 3)_1     -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        14         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Dual_port_RAM.v
    1                                                module Dual_port_RAM(clk,rst_n,rx_valid,din,dout,tx_valid);
    2                                                parameter MEM_DEPTH=256;
    3                                                parameter ADDR_SIZE=8;
    4                                                input [9:0]din;
    5                                                input clk,rst_n,rx_valid;
    6                                                output reg tx_valid;
    7                                                
    8                                                output reg [7:0]dout;
    9                                                
    10                                               reg [ADDR_SIZE-1:0] mem [MEM_DEPTH-1:0];
    11                                               //reg[ADDR_SIZE-1:0] temp_adr;
    12                                               reg[ADDR_SIZE-1:0] wr_ptr,rd_ptr ; ///added 
    13              1                       4084     always @(posedge clk or negedge rst_n) begin
    14                                               	if (!rst_n) begin
    15              1                        167     		dout<=8'b0000_0000;
    16              1                        167     		tx_valid<=0;
    17              1                        167     		wr_ptr<=0;
    18              1                        167     		rd_ptr<=0;
    19                                               	end
    20                                               	else begin
    21                                               		
    22                                                   if(rx_valid==1)begin
    23                                                       if(din[9]==0)begin
    24                                               
    25                                                             if(din[8]==0)begin
    26              1                        955                   		 wr_ptr<=din[7:0];//keda ha write address fel memory
    27              1                        955                   		 tx_valid<=0;
    28                                                              end
    29                                                              else begin
    30              1                       1338                        mem[wr_ptr]<=din[7:0];// hna hy write data fel address
    31              1                       1338                        tx_valid<=0;
    32                                                               end
    33                                                       end
    34                                                       if(din[9]==1)begin
    35                                                           if (din[8]==0) begin
    36              1                        514                       rd_ptr<= din[7:0];
    37              1                        514                       tx_valid<=0;
    38                                                       	end
    39                                                       end
    40                                                   end
    41                                               	///end in here and put the last possiblity alone 
    42                                                   if(din[9:8]==2'b11)begin
    43              1                        514                  dout[7:0]<= mem[rd_ptr];
    44              1                        514                  tx_valid<=1;
    45                                                            
    46                                                   end
    47                                                   //added part to make tx_valid=0
    48                                                   else 
    49              1                       3403         	tx_valid<=0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        76         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 
                                          din[0-9]           1           1      100.00 
                                         dout[7-0]           1           1      100.00 
                                       rd_ptr[7-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          rx_valid           1           1      100.00 
                                          tx_valid           1           1      100.00 
                                       wr_ptr[7-0]           1           1      100.00 

Total Node Count     =         38 
Toggled Node Count   =         38 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (76 of 76 bins)

=================================================================================
=== Instance: /top
=== Design Unit: work.top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File top.sv
    4                                                module top ();
    5                                                bit clk;
    6                                                initial begin
    7               1                          1     	forever begin
    8               1                       8003     	#2 clk=~clk;	
    8               2                       8002     
    9                                                	end
    10                                               end
    11                                               ram_interface ram_if(clk);
    12                                               Dual_port_RAM DUT( ram_if.clk, ram_if.rst_n, ram_if.rx_valid, ram_if.din, ram_if.dout, ram_if.tx_valid);
    13                                               initial begin
    14              1                          1     	uvm_config_db#(virtual ram_interface)::set(null, "uvm_test_top", "v_if_1",ram_if);
    15              1                          1     	run_test("ram_test");

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /sequence_item_pkg
=== Design Unit: work.sequence_item_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        25        17         8    68.00%

================================Branch Details================================

Branch Coverage for instance /sequence_item_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sequence_item_pkg_RAM.sv
------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***     		`uvm_object_utils(ram_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                       4001     Count coming in to IF
    5               2                    ***0***     		`uvm_object_utils(ram_sequence_item);
                                            4001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***     		`uvm_object_utils(ram_sequence_item);
    5               4                    ***0***     		`uvm_object_utils(ram_sequence_item);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                       4001     Count coming in to IF
    5               5                    ***0***     		`uvm_object_utils(ram_sequence_item);
                                            4001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***     		`uvm_object_utils(ram_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    53                                      4000     Count coming in to IF
    53              1                       1338     			if  (din[9:8] == 2'b01 &&rst_n&&rx_valid)begin 
                                            2662     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    57                                      4000     Count coming in to IF
    57              1                        514     			if( din[9:8] == 2'b10 && rst_n&&rx_valid)
                                            3486     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    59                                      4000     Count coming in to IF
    59              1                        955     			if(din[9:8]==2'b00 && rx_valid && rst_n ) begin
                                            3045     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    64                                      4000     Count coming in to IF
    64              1                       3218     			if(rst_n&&rx_valid)
                                             782     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    66                                      4000     Count coming in to IF
    66              1                        514     			if(rst_n && din[9:8]==2'b11)
                                            3486     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    69                                      4000     Count coming in to IF
    69              1                        673     			if(last_operation==2'b11)
    71              1                        597     			else if(last_operation==2'b10)
                                            2730     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    73                                      4000     Count coming in to IF
    73              1                         83     			if(!rst_n)begin
                                            3917     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      17        15         2    88.23%

================================Condition Details================================

Condition Coverage for instance /sequence_item_pkg --

  File sequence_item_pkg_RAM.sv
----------------Focused Condition View-------------------
Line       5 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       5 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       53 Item    1  ((this.din[9:8] == 1) && this.rst_n && this.rx_valid)
Condition totals: 3 of 3 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (this.din[9:8] == 1)         Y
            this.rst_n         Y
         this.rx_valid         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (this.din[9:8] == 1)_0  -                             
  Row   2:          1  (this.din[9:8] == 1)_1  (this.rst_n && this.rx_valid) 
  Row   3:          1  this.rst_n_0            (this.din[9:8] == 1)          
  Row   4:          1  this.rst_n_1            ((this.din[9:8] == 1) && this.rx_valid)
  Row   5:          1  this.rx_valid_0         ((this.din[9:8] == 1) && this.rst_n)
  Row   6:          1  this.rx_valid_1         ((this.din[9:8] == 1) && this.rst_n)

----------------Focused Condition View-------------------
Line       57 Item    1  ((this.din[9:8] == 2) && this.rst_n && this.rx_valid)
Condition totals: 3 of 3 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (this.din[9:8] == 2)         Y
            this.rst_n         Y
         this.rx_valid         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (this.din[9:8] == 2)_0  -                             
  Row   2:          1  (this.din[9:8] == 2)_1  (this.rst_n && this.rx_valid) 
  Row   3:          1  this.rst_n_0            (this.din[9:8] == 2)          
  Row   4:          1  this.rst_n_1            ((this.din[9:8] == 2) && this.rx_valid)
  Row   5:          1  this.rx_valid_0         ((this.din[9:8] == 2) && this.rst_n)
  Row   6:          1  this.rx_valid_1         ((this.din[9:8] == 2) && this.rst_n)

----------------Focused Condition View-------------------
Line       59 Item    1  ((this.din[9:8] == 0) && this.rx_valid && this.rst_n)
Condition totals: 3 of 3 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (this.din[9:8] == 0)         Y
         this.rx_valid         Y
            this.rst_n         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (this.din[9:8] == 0)_0  -                             
  Row   2:          1  (this.din[9:8] == 0)_1  (this.rx_valid && this.rst_n) 
  Row   3:          1  this.rx_valid_0         (this.din[9:8] == 0)          
  Row   4:          1  this.rx_valid_1         ((this.din[9:8] == 0) && this.rst_n)
  Row   5:          1  this.rst_n_0            ((this.din[9:8] == 0) && this.rx_valid)
  Row   6:          1  this.rst_n_1            ((this.din[9:8] == 0) && this.rx_valid)

----------------Focused Condition View-------------------
Line       64 Item    1  (this.rst_n && this.rx_valid)
Condition totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
     this.rst_n         Y
  this.rx_valid         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.rst_n_0          -                             
  Row   2:          1  this.rst_n_1          this.rx_valid                 
  Row   3:          1  this.rx_valid_0       this.rst_n                    
  Row   4:          1  this.rx_valid_1       this.rst_n                    

----------------Focused Condition View-------------------
Line       66 Item    1  (this.rst_n && (this.din[9:8] == 3))
Condition totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
            this.rst_n         Y
  (this.din[9:8] == 3)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  this.rst_n_0            -                             
  Row   2:          1  this.rst_n_1            (this.din[9:8] == 3)          
  Row   3:          1  (this.din[9:8] == 3)_0  this.rst_n                    
  Row   4:          1  (this.din[9:8] == 3)_1  this.rst_n                    

----------------Focused Condition View-------------------
Line       69 Item    1  (this.last_operation == 3)
Condition totals: 1 of 1 input term covered = 100.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  (this.last_operation == 3)         Y

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (this.last_operation == 3)_0  -                             
  Row   2:          1  (this.last_operation == 3)_1  -                             

----------------Focused Condition View-------------------
Line       71 Item    1  (this.last_operation == 2)
Condition totals: 1 of 1 input term covered = 100.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  (this.last_operation == 2)         Y

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (this.last_operation == 2)_0  -                             
  Row   2:          1  (this.last_operation == 2)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      23        14         9    60.86%

================================Statement Details================================

Statement Coverage for instance /sequence_item_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sequence_item_pkg_RAM.sv
    1                                                package sequence_item_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	`include "uvm_macros.svh"
    4                                                	class ram_sequence_item extends  uvm_sequence_item;
    5               1                    ***0***     		`uvm_object_utils(ram_sequence_item);
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                       4001     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                       4001     
    5              10                    ***0***     
    6                                                		/*------------------------------------------------------------------------------
    7                                                		--  new
    8                                                		------------------------------------------------------------------------------*/
    9                                                		function  new(string name ="sequence_item");
    10              1                       8006     			super.new(name);
    11                                               		endfunction : new
    12                                               		/*------------------------------------------------------------------------------
    13                                               		--  conver2string
    14                                               		------------------------------------------------------------------------------*/
    15                                               		function string convert2string();
    16              1                    ***0***     			return $sformatf("%s din=%0h , rst_n=%0b , rx_valid=%0b,dout=%0h , tx_valid=%0b ",super.convert2string, din , rst_n, rx_valid, dout , tx_valid);
    17                                               		endfunction : convert2string
    18                                               		/*------------------------------------------------------------------------------
    19                                               		--  parameters
    20                                               		------------------------------------------------------------------------------*/
    21                                               		parameter MEM_DEPTH=256;
    22                                               		parameter MEM_WIDTH=8;
    23                                               		/*------------------------------------------------------------------------------
    24                                               		--variables  
    25                                               		------------------------------------------------------------------------------*/
    26                                               		rand logic [9:0] din;
    27                                               		rand logic rst_n,rx_valid;
    28                                               		logic tx_valid;
    29                                               		logic [7:0] dout;
    30                                               		logic [MEM_WIDTH-1:0] queue[$];
    31              1                       8006     		logic [1:0] last_operation=2'b11;
    32                                               		bit success,read_data_available,write_data_available;
    33                                               		logic [7:0] test_write,test_read,last_address;
    34                                               		/*------------------------------------------------------------------------------
    35                                               		--constrains   
    36                                               		------------------------------------------------------------------------------*/
    37                                               		constraint reset    { rst_n    dist {1 := 98     , 0 := 2 };} // RAM_1
    38                                               		constraint RX_valid { rx_valid dist {1 := 80     , 0 := 20};} // RAM_2
    39                                               		constraint Din        { din[9:8] dist {[0:1] :/ 60 , [2:3] :/ 30};} // RAM_3
    40                                               		constraint writing_constrains {  if(last_operation==2'b00 ) din[9:8]==2'b01;
    41                                               										 
    42                                               										 if(last_operation==2'b00) rx_valid==1;
    43                                               							 		  } //RAM_3
    44                                               		constraint reading_constrains  { if (din[9:8] == 2) { din[7:0] inside {queue};}
    45                                               							 			 if (read_data_available){din[9:8]!=2'b10};
    46                                               									     if (!read_data_available){din[9:8]!=2'b11}; 
    47                                               									     if(!write_data_available) {din[9:8] !=2'b01}; //moved from writing constrains
    48                                               										} // RAM_3
    49                                               		/*------------------------------------------------------------------------------
    50                                               		--functions   
    51                                               		------------------------------------------------------------------------------*/
    52                                               		function void post_randomize();
    53                                               			if  (din[9:8] == 2'b01 &&rst_n&&rx_valid)begin 
    54              1                       1338     				test_write = last_address;
    55              1                       1338     				queue.push_back(last_address);
    56                                               			end
    57                                               			if( din[9:8] == 2'b10 && rst_n&&rx_valid)
    58              1                        514     				test_read=din[7:0];
    59                                               			if(din[9:8]==2'b00 && rx_valid && rst_n ) begin
    60              1                        955     				write_data_available=1;
    61              1                        955     				last_address=din[7:0];
    62                                               			end
    63                                               			// if the operation is valid assign it in last operation	
    64                                               			if(rst_n&&rx_valid)
    65              1                       3218     				last_operation=din[9:8];
    66                                               			if(rst_n && din[9:8]==2'b11)
    67              1                        514     				last_operation=2'b11;
    68                                               			//setting variable to make sure that we have one read address operation followed by read data 
    69                                               			if(last_operation==2'b11)
    70              1                        673     				read_data_available=0;
    71                                               			else if(last_operation==2'b10)
    72              1                        597     				read_data_available=1;
    73                                               			if(!rst_n)begin
    74              1                         83     				last_address=0;


=================================================================================
=== Instance: /coverage_pkg
=== Design Unit: work.coverage_pkg
=================================================================================

Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses         11        na        na        na
            Covergroup Bins         28        28         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /coverage_pkg/ram_coverage_collector/cvr_gp     100.00%        100          -    Covered              
    covered/total bins:                                    28         28          -                      
    missing/total bins:                                     0         28          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint reset                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_rst                                       84          1          -    Covered              
        bin ONE_rst                                      3917          1          -    Covered              
    Coverpoint RX_valid                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_rx                                       714          1          -    Covered              
        bin ONE_rx                                       3286          1          -    Covered              
    Coverpoint TX_valid                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_tx                                      3487          1          -    Covered              
        bin ONE_tx                                        514          1          -    Covered              
    Coverpoint Din                                    100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_din                                     1222          1          -    Covered              
        bin ONE_din                                      1579          1          -    Covered              
        bin TWO_din                                       673          1          -    Covered              
        bin THREE_din                                     526          1          -    Covered              
    Coverpoint Dout                                   100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_values                                   4001          1          -    Covered              
    Coverpoint Address_write                          100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_range_of_addr                            1222          1          -    Covered              
    Coverpoint Address_read                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_range_of_addr                             673          1          -    Covered              
    Cross rx_valid_with_din                           100.00%        100          -    Covered              
        covered/total bins:                                 8          8          -                      
        missing/total bins:                                 0          8          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <THREE_din,ONE_rx>                        420          1          -    Covered              
            bin <TWO_din,ONE_rx>                          525          1          -    Covered              
            bin <ONE_din,ONE_rx>                         1365          1          -    Covered              
            bin <ZERO_din,ONE_rx>                         976          1          -    Covered              
            bin <THREE_din,ZERO_rx>                       106          1          -    Covered              
            bin <TWO_din,ZERO_rx>                         148          1          -    Covered              
            bin <ONE_din,ZERO_rx>                         214          1          -    Covered              
            bin <ZERO_din,ZERO_rx>                        246          1          -    Covered              
    Cross reading_with_tx_valid                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_tx,THREE_din>                        514          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignored_low_tx                    3486                     -    Occurred             
            ignore_bin ignored_two_din                    673                     -    Occurred             
            ignore_bin ignored_one_din                   1579                     -    Occurred             
            ignore_bin ignored_zero_din                  1222                     -    Occurred             
    Cross rst_rx_din_11                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_rx,THREE_din,ONE_rst>                411          1          -    Covered              
            bin <ZERO_rx,THREE_din,ONE_rst>               103          1          -    Covered              
            bin <ONE_rx,THREE_din,ZERO_rst>                 9          1          -    Covered              
            bin <ZERO_rx,THREE_din,ZERO_rst>                3          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignored_two_din                    673                     -    Occurred             
            ignore_bin ignored_one_din                   1579                     -    Occurred             
            ignore_bin ignored_zero_din                  1222                     -    Occurred             
    Cross dout_with_tx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_tx,all_values>                       514          1          -    Covered              
            bin <ZERO_tx,all_values>                     3487          1          -    Covered              
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        12         2    85.71%

================================Statement Details================================

Statement Coverage for instance /coverage_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File coverage_pkg_RAM.sv
    1                                                package coverage_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	`include "uvm_macros.svh"
    4                                                	import sequence_item_pkg::*;
    5                                                	class ram_coverage_collector extends  uvm_component;
    6               1                    ***0***     		`uvm_component_utils(ram_coverage_collector);
    6               2                    ***0***     
    6               3                          2     
    7                                                		
    8                                                		/*------------------------------------------------------------------------------
    9                                                		--  declarations
    10                                               		------------------------------------------------------------------------------*/
    11                                               		uvm_analysis_port #(ram_sequence_item) cvg_export;
    12                                               		uvm_tlm_analysis_fifo #(ram_sequence_item) cvg_fifo;
    13                                               		ram_sequence_item seq_item; 
    14                                               		covergroup cvr_gp;
    15                                               			reset:coverpoint    seq_item.rst_n    { bins ZERO_rst = {0}; bins ONE_rst = {1};} // RAM_1
    16                                               			RX_valid:coverpoint seq_item.rx_valid { bins ZERO_rx = {0}; bins ONE_rx = {1};}   // RAM_2
    17                                               			TX_valid:coverpoint seq_item.tx_valid { bins ZERO_tx = {0}; bins ONE_tx = {1};}	 // RAM_4
    18                                               			Din:coverpoint      seq_item.din      { wildcard bins ZERO_din = {10'b00_????_????}; // RAM_3
    19                                               										   wildcard bins ONE_din = {10'b01_????_????};
    20                                               										   wildcard bins TWO_din = {10'b10_????_????};
    21                                               										   wildcard bins THREE_din = {10'b11_????_????};
    22                                               										 }
    23                                               			Dout:coverpoint     seq_item.dout     { wildcard bins all_values = {8'b????_????};} // RAM_5
    24                                               			Address_write:coverpoint seq_item.test_write     { bins all_range_of_addr = {[0:8'b1111_1111]};} // RAM_6
    25                                               			Address_read:coverpoint seq_item.test_read     { bins all_range_of_addr = {[0:8'b1111_1111]};} // RAM_6
    26                                               			////////////////////////////////////////////////////////////////////////////////////////
    27                                               			rx_valid_with_din:cross Din,RX_valid;    // to see and check the effect of rx_valid in all operations . // RAM_3  RAM_2
    28                                               			reading_with_tx_valid:cross TX_valid,Din{ // number of succesful reading operations // RAM_4 , RAM_3
    29                                               													 ignore_bins ignored_zero_din=binsof(Din.ZERO_din);
    30                                               													 ignore_bins ignored_one_din=binsof(Din.ONE_din);
    31                                               													 ignore_bins ignored_two_din=binsof(Din.TWO_din);
    32                                               													 ignore_bins ignored_low_tx=binsof(TX_valid.ZERO_tx);
    33                                               													}
    34                                               			rst_rx_din_11:cross RX_valid,Din,reset{ //make sure that reading operation and rx valid doesnot affect the output when we reset 
    35                                               													// and to know how many succesful and unsucceful reading operations and compare number of succeful with the cross above
    36                                               													// RAM_2 , RAM_3 , RAM_1
    37                                               													ignore_bins ignored_zero_din=binsof(Din.ZERO_din);
    38                                               													ignore_bins ignored_one_din=binsof(Din.ONE_din);
    39                                               													ignore_bins ignored_two_din=binsof(Din.TWO_din);			
    40                                               												}
    41                                               			dout_with_tx_valid:cross TX_valid,Dout; //to check that tx_valid is always high when dout changes (if there is no reset ) // RAM_4
    42                                               		endgroup
    43                                               		/*------------------------------------------------------------------------------
    44                                               		--  new
    45                                               		------------------------------------------------------------------------------*/
    46                                               		function  new(string name ="coverage_collector",uvm_component parent= null);
    47              1                          1     			super.new(name, parent);
    48              1                          1     			cvr_gp=new;
    49                                               		endfunction : new
    50                                               		/*------------------------------------------------------------------------------
    51                                               		--build phase   
    52                                               		------------------------------------------------------------------------------*/
    53                                               		function void build_phase(uvm_phase phase);
    54              1                          1     			super.build_phase(phase);
    55              1                          1     			cvg_fifo=new("cvg_fifo",this);
    56              1                          1     			cvg_export=new("cvg_export",this);
    57                                               		endfunction : build_phase
    58                                               		/*------------------------------------------------------------------------------
    59                                               		--  connect_phase 
    60                                               		------------------------------------------------------------------------------*/
    61                                               		function void connect_phase(uvm_phase phase );
    62              1                          1     			super.connect_phase(phase);
    63              1                          1     			cvg_export.connect(cvg_fifo.analysis_export);
    64                                               		endfunction : connect_phase
    65                                               		/*------------------------------------------------------------------------------
    66                                               		-- run phase   
    67                                               		------------------------------------------------------------------------------*/
    68                                               		task run_phase(uvm_phase phase );
    69              1                          1     			super.run_phase(phase);
    70              1                          1     			forever begin
    71              1                       4002     			cvg_fifo.get(seq_item);
    72              1                       4001     			cvr_gp.sample();


=================================================================================
=== Instance: /config_object_pkg
=== Design Unit: work.config_object_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /config_object_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File config_object_pkg_RAM.sv
------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***     		`uvm_object_utils(ram_config_object);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               2                    ***0***     		`uvm_object_utils(ram_config_object);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***     		`uvm_object_utils(ram_config_object);
    5               4                    ***0***     		`uvm_object_utils(ram_config_object);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               5                    ***0***     		`uvm_object_utils(ram_config_object);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***     		`uvm_object_utils(ram_config_object);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /config_object_pkg --

  File config_object_pkg_RAM.sv
----------------Focused Condition View-------------------
Line       5 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       5 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /config_object_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File config_object_pkg_RAM.sv
    1                                                package config_object_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	`include "uvm_macros.svh"
    4                                                	class ram_config_object extends uvm_object;
    5               1                    ***0***     		`uvm_object_utils(ram_config_object);
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                    ***0***     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                    ***0***     
    5              10                    ***0***     
    6                                                		virtual ram_interface object_vif;
    7                                                		function  new(string name="config_object");
    8               1                          1     			super.new(name);


=================================================================================
=== Instance: /sequencer_pkg
=== Design Unit: work.sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         2         2    50.00%

================================Statement Details================================

Statement Coverage for instance /sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sequencer_RAM.sv
    1                                                package sequencer_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import sequence_item_pkg::*;
    4                                                	`include "uvm_macros.svh"
    5                                                	class ram_sequencer extends  uvm_sequencer #(ram_sequence_item);
    6               1                    ***0***     		`uvm_component_utils(ram_sequencer);
    6               2                    ***0***     
    6               3                          2     
    7                                                		/*------------------------------------------------------------------------------
    8                                                		--  new
    9                                                		------------------------------------------------------------------------------*/
    10                                               		function  new(string name= "ram_sequencer",uvm_component parent = null) ;
    11              1                          1     			super.new(name,parent);


=================================================================================
=== Instance: /monitor_pkg
=== Design Unit: work.monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         6         5         1    83.33%

================================Branch Details================================

Branch Coverage for instance /monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File monitor_RAM.sv
------------------------------------IF Branch------------------------------------
    39                                      4001     Count coming in to IF
    39              1                       1222     				if(monitor_vif.din[9:8]==2'b00)
                                            2779     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    41                                      4001     Count coming in to IF
    41              1                        673     				if(monitor_vif.din[9:8]==2'b10)
                                            3328     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    44                                      4001     Count coming in to IF
    44              1                    ***0***     				 `uvm_info("monitor run phase",$sformatf("monitoring at time %0t data is %s", $time(), monitor_seq_item.convert2string()),UVM_HIGH);
                                            4001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /monitor_pkg --

  File monitor_RAM.sv
----------------Focused Condition View-------------------
Line       39 Item    1  (this.monitor_vif.din[9:8] == 0)
Condition totals: 1 of 1 input term covered = 100.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (this.monitor_vif.din[9:8] == 0)         Y

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:          1  (this.monitor_vif.din[9:8] == 0)_0  -                             
  Row   2:          1  (this.monitor_vif.din[9:8] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       41 Item    1  (this.monitor_vif.din[9:8] == 2)
Condition totals: 1 of 1 input term covered = 100.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (this.monitor_vif.din[9:8] == 2)         Y

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:          1  (this.monitor_vif.din[9:8] == 2)_0  -                             
  Row   2:          1  (this.monitor_vif.din[9:8] == 2)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      19        16         3    84.21%

================================Statement Details================================

Statement Coverage for instance /monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File monitor_RAM.sv
    1                                                package monitor_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import sequence_item_pkg::*;
    4                                                	`include "uvm_macros.svh"
    5                                                	class ram_monitor extends  uvm_monitor;
    6               1                    ***0***     		`uvm_component_utils(ram_monitor);
    6               2                    ***0***     
    6               3                          2     
    7                                                		/*------------------------------------------------------------------------------
    8                                                		--  new
    9                                                		------------------------------------------------------------------------------*/
    10                                               		function  new(string name= "monitor",uvm_component parent = null) ;
    11              1                          1     			super.new(name,parent);
    12                                               		endfunction : new
    13                                               		/*------------------------------------------------------------------------------
    14                                               		--declarations  
    15                                               		------------------------------------------------------------------------------*/
    16                                               		ram_sequence_item monitor_seq_item;
    17                                               		virtual ram_interface monitor_vif;
    18                                               		uvm_analysis_port #(ram_sequence_item) mon_ap;
    19                                               		/*------------------------------------------------------------------------------
    20                                               		--  build_phase 
    21                                               		------------------------------------------------------------------------------*/
    22                                               		function void build_phase(uvm_phase phase);
    23              1                          1     			super.build_phase(phase);
    24              1                          1     			mon_ap=new("mon_ap",this);
    25                                               		endfunction : build_phase
    26                                               		/*------------------------------------------------------------------------------
    27                                               		-- run_phase   
    28                                               		------------------------------------------------------------------------------*/
    29                                               		task run_phase(uvm_phase phase );
    30              1                          1     			super.run_phase(phase);
    31              1                          1     			forever begin
    32              1                       4002     				monitor_seq_item=ram_sequence_item::type_id::create("monitor_seq_item");
    33              1                       4002     				@(negedge monitor_vif.clk) ;
    34              1                       4001     				monitor_seq_item.rst_n=monitor_vif.rst_n;
    35              1                       4001     				monitor_seq_item.din=monitor_vif.din;
    36              1                       4001     				monitor_seq_item.rx_valid=monitor_vif.rx_valid;
    37              1                       4001     				monitor_seq_item.tx_valid=monitor_vif.tx_valid;
    38              1                       4001     				monitor_seq_item.dout=monitor_vif.dout;
    39                                               				if(monitor_vif.din[9:8]==2'b00)
    40              1                       1222     					monitor_seq_item.test_write=monitor_vif.din[7:0];
    41                                               				if(monitor_vif.din[9:8]==2'b10)
    42              1                        673     					monitor_seq_item.test_read =monitor_vif.din[7:0];
    43              1                       4001     				mon_ap.write(monitor_seq_item);
    44              1                    ***0***     				 `uvm_info("monitor run phase",$sformatf("monitoring at time %0t data is %s", $time(), monitor_seq_item.convert2string()),UVM_HIGH);


=================================================================================
=== Instance: /driver_pkg
=== Design Unit: work.driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         2         2    50.00%

================================Branch Details================================

Branch Coverage for instance /driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File driver_RAM.sv
------------------------------------IF Branch------------------------------------
    26                                      4001     Count coming in to IF
    26              1                    ***0***     					`uvm_info("driver run phase",$sformatf("driving at time %0t and data is %s", $time(), driver_seq_item.convert2string()),UVM_HIGH);
                                            4001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    31                                      4001     Count coming in to IF
    31              1                    ***0***     					`uvm_info("driver run phase",$sformatf("data equals %s", driver_seq_item.convert2string()),UVM_HIGH);
                                            4001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        11         4    73.33%

================================Statement Details================================

Statement Coverage for instance /driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File driver_RAM.sv
    1                                                package driver_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import sequence_item_pkg::*;
    4                                                	`include "uvm_macros.svh"
    5                                                	class ram_driver extends  uvm_driver #(ram_sequence_item);
    6               1                    ***0***     		`uvm_component_utils(ram_driver);
    6               2                    ***0***     
    6               3                          2     
    7                                                		/*------------------------------------------------------------------------------
    8                                                		--  new
    9                                                		------------------------------------------------------------------------------*/
    10                                               		function  new(string name= "driver",uvm_component parent = null) ;
    11              1                          1     			super.new(name,parent);
    12                                               		endfunction : new
    13                                               		/*------------------------------------------------------------------------------
    14                                               		--  declarations
    15                                               		------------------------------------------------------------------------------*/
    16                                               		virtual ram_interface driver_vif;
    17                                               		ram_sequence_item driver_seq_item;
    18                                               		/*------------------------------------------------------------------------------
    19                                               		--  run_phase
    20                                               		------------------------------------------------------------------------------*/
    21                                               		task run_phase(uvm_phase phase );
    22              1                          1     			super.run_phase(phase);
    23              1                          1     			forever begin
    24              1                       4002     				driver_seq_item=ram_sequence_item::type_id::create("driver_seq_item");
    25              1                       4002     				seq_item_port.get_next_item(driver_seq_item);
    26              1                    ***0***     					`uvm_info("driver run phase",$sformatf("driving at time %0t and data is %s", $time(), driver_seq_item.convert2string()),UVM_HIGH);
    27              1                       4001     					driver_vif.rst_n=driver_seq_item.rst_n;
    28              1                       4001     					driver_vif.din=driver_seq_item.din;
    29              1                       4001     					driver_vif.rx_valid=driver_seq_item.rx_valid;
    30              1                       4001     					@(negedge  driver_vif.clk);
    31              1                    ***0***     					`uvm_info("driver run phase",$sformatf("data equals %s", driver_seq_item.convert2string()),UVM_HIGH);
    32              1                       4001     				seq_item_port.item_done();


=================================================================================
=== Instance: /agent_pkg
=== Design Unit: work.agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         1         3    25.00%

================================Branch Details================================

Branch Coverage for instance /agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File agent_RAM.sv
------------------------------------IF Branch------------------------------------
    35                                         1     Count coming in to IF
    35              1                    ***0***     			if(!uvm_config_db#(ram_config_object)::get(this, "", "CFG",obj ))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***     				`uvm_error(" build phase","error in agent");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        12         3    80.00%

================================Statement Details================================

Statement Coverage for instance /agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File agent_RAM.sv
    1                                                package agent_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import driver_pkg::*;
    4                                                	import monitor_pkg::*;
    5                                                	import sequencer_pkg::*;
    6                                                	import sequence_item_pkg::*;
    7                                                	import config_object_pkg::*;
    8                                                	
    9                                                	`include "uvm_macros.svh"
    10                                               	class ram_agent extends  uvm_agent;
    11              1                    ***0***     		`uvm_component_utils(ram_agent);
    11              2                    ***0***     
    11              3                          2     
    12                                               		/*------------------------------------------------------------------------------
    13                                               		--  declarations
    14                                               		------------------------------------------------------------------------------*/
    15                                               		ram_driver driver;
    16                                               		ram_monitor monitor;
    17                                               		ram_sequencer sequencer;
    18                                               		uvm_analysis_port #(ram_sequence_item) agt_port;
    19                                               		ram_config_object obj;
    20                                               		/*------------------------------------------------------------------------------
    21                                               		--  new
    22                                               		------------------------------------------------------------------------------*/
    23                                               		function  new(string name= "agent",uvm_component parent = null) ;
    24              1                          1     			super.new(name,parent);
    25                                               		endfunction : new
    26                                               		/*------------------------------------------------------------------------------
    27                                               		--  build_phase
    28                                               		------------------------------------------------------------------------------*/
    29                                               		function void build_phase (uvm_phase phase); //getting conig object
    30              1                          1     			super.build_phase(phase);
    31              1                          1     			driver=ram_driver::type_id::create("driver",this);
    32              1                          1     			monitor=ram_monitor::type_id::create("monitor",this);
    33              1                          1     			sequencer=ram_sequencer::type_id::create("sequencer",this);
    34              1                          1     			agt_port=new("agt_port",this);
    35                                               			if(!uvm_config_db#(ram_config_object)::get(this, "", "CFG",obj ))
    36              1                    ***0***     				`uvm_error(" build phase","error in agent");
    37                                               		endfunction : build_phase 
    38                                               		/*------------------------------------------------------------------------------
    39                                               		--  connect_phase
    40                                               		------------------------------------------------------------------------------*/
    41                                               		function void connect_phase(uvm_phase phase); //connecting interfaces is missing 
    42              1                          1     			super.connect_phase(phase);
    43              1                          1     			driver.seq_item_port.connect(sequencer.seq_item_export);
    44              1                          1     			monitor.mon_ap.connect(agt_port);
    45              1                          1     			driver.driver_vif=obj.object_vif;
    46              1                          1     			monitor.monitor_vif=obj.object_vif;


=================================================================================
=== Instance: /scoreboard_pkg
=== Design Unit: work.scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        21        15         6    71.42%

================================Branch Details================================

Branch Coverage for instance /scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scoreboard_pkg_RAM.sv
------------------------------------IF Branch------------------------------------
    54                                      4001     Count coming in to IF
    54              1                    ***0***     		 		if(dout_ref != sb_seq_item.dout || tx_valid_ref != sb_seq_item.tx_valid) begin
    58              1                       4001     		 		else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    56                                   ***0***     Count coming in to IF
    56              1                    ***0***     		 			`uvm_error("scoreboard",$sformatf("error : data is %s and dout = %0h and tx_valid = %0b",sb_seq_item.convert2string() , dout_ref, tx_valid_ref));
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    68                                      4001     Count coming in to IF
    68              1                         84     			if (!seq_item_test.rst_n) begin
    74              1                       3917     			else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    75                                      3917     Count coming in to CASE
    76              1                       1198     					2'b00:begin
    82              1                       1547     					2'b01:begin
    88              1                        658     					2'b10:begin
    94              1                        514     					2'b11:begin
                                         ***0***     All False Count
Branch totals: 4 hits of 5 branches = 80.00%

------------------------------------IF Branch------------------------------------
    77                                      1198     Count coming in to IF
    77              1                        955     						if(seq_item_test.rx_valid) 
                                             243     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    83                                      1547     Count coming in to IF
    83              1                       1338     						if(seq_item_test.rx_valid)  
                                             209     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    89                                       658     Count coming in to IF
    89              1                        514     						if(seq_item_test.rx_valid)  
                                             144     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                        1     Count coming in to IF
    106             1                          1     			`uvm_info("report phase",$sformatf("correct iterations = %0d", correct_count),UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    107                                        1     Count coming in to IF
    107             1                          1     			`uvm_info("report phase",$sformatf("wrong iterations = %0d", error_count),UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /scoreboard_pkg --

  File scoreboard_pkg_RAM.sv
----------------Focused Condition View-------------------
Line       54 Item    1  ((this.dout_ref != this.sb_seq_item.dout) || (this.tx_valid_ref != this.sb_seq_item.tx_valid))
Condition totals: 0 of 2 input terms covered = 0.00%

                                        Input Term   Covered  Reason for no coverage   Hint
                                       -----------  --------  -----------------------  --------------
          (this.dout_ref != this.sb_seq_item.dout)         N  '_1' not hit             Hit '_1'
  (this.tx_valid_ref != this.sb_seq_item.tx_valid)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                          Non-masking condition(s)      
 ---------  ---------  --------------------                                -------------------------     
  Row   1:          1  (this.dout_ref != this.sb_seq_item.dout)_0          ~(this.tx_valid_ref != this.sb_seq_item.tx_valid)
  Row   2:    ***0***  (this.dout_ref != this.sb_seq_item.dout)_1          -                             
  Row   3:          1  (this.tx_valid_ref != this.sb_seq_item.tx_valid)_0  ~(this.dout_ref != this.sb_seq_item.dout)
  Row   4:    ***0***  (this.tx_valid_ref != this.sb_seq_item.tx_valid)_1  ~(this.dout_ref != this.sb_seq_item.dout)


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      33        29         4    87.87%

================================Statement Details================================

Statement Coverage for instance /scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scoreboard_pkg_RAM.sv
    1                                                package scoreboard_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	`include "uvm_macros.svh"
    4                                                	import sequence_item_pkg::*;
    5                                                	 class ram_scoreboard extends  uvm_scoreboard;
    6               1                    ***0***     	 	`uvm_component_utils(ram_scoreboard);
    6               2                    ***0***     
    6               3                          2     
    7                                                	 	/*------------------------------------------------------------------------------
    8                                                	 	--  new
    9                                                	 	------------------------------------------------------------------------------*/
    10                                               	 	function  new(string name= "scoreboard",uvm_component parent = null) ;
    11              1                          1     			super.new(name,parent);
    12                                               		endfunction : new
    13                                               	 	/*------------------------------------------------------------------------------
    14                                               	 	--  declarations
    15                                               	 	------------------------------------------------------------------------------*/
    16                                               	 	uvm_analysis_export #(ram_sequence_item) sb_export;
    17                                               	 	uvm_tlm_analysis_fifo #(ram_sequence_item) sb_fifo;
    18                                               	 	ram_sequence_item sb_seq_item;
    19                                               	 	parameter MEM_DEPTH=256;
    20                                               		parameter MEM_WIDTH=8;
    21                                               		logic [MEM_WIDTH-1:0] mem[logic[MEM_DEPTH-1:0]]; 
    22                                               		logic[7:0]dout_ref;
    23                                               		logic tx_valid_ref;
    24                                               		logic [7:0] wr_addr, rd_addr;
    25              1                          1     		int error_count=0;
    26              1                          1     		int correct_count=0;
    27                                                	 	/*------------------------------------------------------------------------------
    28                                               	 	--build_phase  
    29                                               	 	------------------------------------------------------------------------------*/
    30                                               	 	function void build_phase(uvm_phase phase);
    31              1                          1     	 		super.build_phase(phase);
    32              1                          1     	 		sb_export=new("sb_export",this);
    33              1                          1     	 		sb_fifo=new("sb_fifo",this);
    34                                               	 	endfunction : build_phase
    35                                               	 	/*------------------------------------------------------------------------------
    36                                               	 	--connect phase  
    37                                               	 	------------------------------------------------------------------------------*/
    38                                               	 	function void connect_phase(uvm_phase phase );
    39              1                          1     	 		super.connect_phase(phase);
    40              1                          1     	 		sb_export.connect(sb_fifo.analysis_export);
    41                                               	 	endfunction : connect_phase
    42                                               	 	/*------------------------------------------------------------------------------
    43                                               	 	--  run_phase
    44                                               	 	------------------------------------------------------------------------------*/
    45                                               	 	task run_phase(uvm_phase phase);
    46                                               	 		//`uvm_info("run_phase","started",UVM_MEDIUM);
    47              1                          1     	 		super.run_phase(phase);
    48              1                          1     	 		forever begin
    49                                               		 		//`uvm_info("scoreboard","before get",UVM_MEDIUM);
    50              1                       4002     		 		sb_fifo.get(sb_seq_item);
    51                                               		 		//`uvm_info("scoreboard","after get and before ref ",UVM_MEDIUM);
    52              1                       4001     		 		golden_ref(sb_seq_item);
    53                                               		 		//`uvm_info("scoreboard","after ref",UVM_MEDIUM);
    54                                               		 		if(dout_ref != sb_seq_item.dout || tx_valid_ref != sb_seq_item.tx_valid) begin
    55              1                    ***0***     		 			error_count++;
    56              1                    ***0***     		 			`uvm_error("scoreboard",$sformatf("error : data is %s and dout = %0h and tx_valid = %0b",sb_seq_item.convert2string() , dout_ref, tx_valid_ref));
    57                                               		 		end
    58                                               		 		else begin
    59              1                       4001     		 			correct_count++;
    60                                               		 		end
    61                                               	 		end
    62                                               	 	endtask : run_phase
    63                                               	 	/*------------------------------------------------------------------------------
    64                                               	 	--golden_ref  
    65                                               	 	------------------------------------------------------------------------------*/
    66                                               	 	task golden_ref(ram_sequence_item seq_item_test);
    67                                               	 		//`uvm_info("scoreboard","entering golden ref",UVM_MEDIUM);
    68                                               			if (!seq_item_test.rst_n) begin
    69              1                         84     				dout_ref=0;
    70              1                         84     				tx_valid_ref=0;
    71              1                         84     				wr_addr=0;
    72              1                         84     				rd_addr=0;
    73                                               			end
    74                                               			else begin
    75                                               				case (seq_item_test.din[MEM_WIDTH+1:8]) 
    76                                               					2'b00:begin
    77                                               						if(seq_item_test.rx_valid) 
    78              1                        955     							wr_addr=seq_item_test.din[MEM_WIDTH-1:0];
    79              1                       1198     							tx_valid_ref=0;
    80                                               						
    81                                               					end
    82                                               					2'b01:begin
    83                                               						if(seq_item_test.rx_valid)  
    84              1                       1338     							mem[wr_addr]=seq_item_test.din[MEM_WIDTH-1:0];
    85              1                       1547     							tx_valid_ref=0;
    86                                               						
    87                                               					end
    88                                               					2'b10:begin
    89                                               						if(seq_item_test.rx_valid)  
    90              1                        514     							rd_addr=seq_item_test.din[MEM_WIDTH-1:0];
    91              1                        658     							tx_valid_ref=0;
    92                                               						
    93                                               					end
    94                                               					2'b11:begin
    95              1                        514     						dout_ref=mem[rd_addr];
    96              1                        514     						tx_valid_ref=1;
    97                                               					end
    98                                               					endcase
    99                                               			end	 		
    100                                              	 	endtask : golden_ref
    101                                              	 	/*------------------------------------------------------------------------------
    102                                              	 	--report_phase  
    103                                              	 	------------------------------------------------------------------------------*/
    104                                              	 	function void report_phase(uvm_phase phase );
    105             1                          1     			super.report_phase(phase);
    106             1                          1     			`uvm_info("report phase",$sformatf("correct iterations = %0d", correct_count),UVM_MEDIUM);
    107             1                          1     			`uvm_info("report phase",$sformatf("wrong iterations = %0d", error_count),UVM_MEDIUM)


=================================================================================
=== Instance: /environment_pkg
=== Design Unit: work.environment_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         9         2    81.81%

================================Statement Details================================

Statement Coverage for instance /environment_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File environment_pkg_RAM.sv
    1                                                package environment_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import scoreboard_pkg::*;
    4                                                	import agent_pkg::*;
    5                                                	import sequence_item_pkg::*;
    6                                                	import coverage_pkg::*;
    7                                                	
    8                                                	`include "uvm_macros.svh"
    9                                                	class ram_environment extends  uvm_env;
    10              1                    ***0***     		`uvm_component_utils(ram_environment);
    10              2                    ***0***     
    10              3                          2     
    11                                               		/*------------------------------------------------------------------------------
    12                                               		--  new
    13                                               		------------------------------------------------------------------------------*/
    14                                               		function  new(string name ="environment" , uvm_component parent =null);
    15              1                          1     			super.new(name,parent);
    16                                               		endfunction : new
    17                                               		/*------------------------------------------------------------------------------
    18                                               		--  declarations
    19                                               		------------------------------------------------------------------------------*/
    20                                               		ram_agent agent;
    21                                               		ram_scoreboard scoreboard;
    22                                               		ram_coverage_collector coverage_collector;
    23                                               		/*------------------------------------------------------------------------------
    24                                               		-- build_phase  
    25                                               		------------------------------------------------------------------------------*/
    26                                               		function void build_phase(uvm_phase phase);
    27              1                          1     			super.build_phase(phase);
    28              1                          1     			agent=ram_agent::type_id::create("agent",this);
    29              1                          1     			scoreboard=ram_scoreboard::type_id::create("scoreboard",this);
    30              1                          1     			coverage_collector = ram_coverage_collector::type_id::create("coverage_collector",this);
    31                                               		endfunction : build_phase
    32                                               		/*------------------------------------------------------------------------------
    33                                               		--  connect_phase
    34                                               		------------------------------------------------------------------------------*/
    35                                               		function void connect_phase(uvm_phase phase);
    36              1                          1     			super.connect_phase(phase);
    37              1                          1     			agent.agt_port.connect(scoreboard.sb_export);
    38              1                          1     			agent.agt_port.connect(coverage_collector.cvg_export);


=================================================================================
=== Instance: /sequence_pkg
=== Design Unit: work.sequence_pkg
=================================================================================

Assertion Coverage:
    Assertions                       2         2         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/sequence_pkg/many_writes_sequence/body/#ublk#50851543#48/immed__50
                     sequence_pkg.sv(50)                0          1
/sequence_pkg/many_writes_sequence/body/#ublk#50851543#55/immed__57
                     sequence_pkg.sv(57)                0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20         4        16    20.00%

================================Branch Details================================

Branch Coverage for instance /sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sequence_pkg.sv
------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***     		`uvm_object_utils(reset_sequence);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               2                    ***0***     		`uvm_object_utils(reset_sequence);
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***     		`uvm_object_utils(reset_sequence);
    7               4                    ***0***     		`uvm_object_utils(reset_sequence);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               5                    ***0***     		`uvm_object_utils(reset_sequence);
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***     		`uvm_object_utils(reset_sequence);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    32                                   ***0***     Count coming in to IF
    32              1                    ***0***     		`uvm_object_utils(many_writes_sequence);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    32                                         1     Count coming in to IF
    32              2                    ***0***     		`uvm_object_utils(many_writes_sequence);
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    32                                   ***0***     Count coming in to IF
    32              3                    ***0***     		`uvm_object_utils(many_writes_sequence);
    32              4                    ***0***     		`uvm_object_utils(many_writes_sequence);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    32                                         1     Count coming in to IF
    32              5                    ***0***     		`uvm_object_utils(many_writes_sequence);
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    32                                   ***0***     Count coming in to IF
    32              6                    ***0***     		`uvm_object_utils(many_writes_sequence);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         0         4     0.00%

================================Condition Details================================

Condition Coverage for instance /sequence_pkg --

  File sequence_pkg.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       7 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       32 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       32 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      34        18        16    52.94%

================================Statement Details================================

Statement Coverage for instance /sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sequence_pkg.sv
    1                                                package sequence_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	import sequence_item_pkg::*;
    4                                                	`include "uvm_macros.svh" 
    5                                                	class reset_sequence extends  uvm_sequence #(ram_sequence_item) ;
    6                                                
    7               1                    ***0***     		`uvm_object_utils(reset_sequence);
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                          1     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                          1     
    7              10                    ***0***     
    8                                                		/*------------------------------------------------------------------------------
    9                                                		--  new
    10                                               		------------------------------------------------------------------------------*/
    11                                               		function  new(string name ="reset_sequence");
    12              1                          1     			super.new(name);
    13                                               		endfunction : new
    14                                               		/*------------------------------------------------------------------------------
    15                                               		--  declarations
    16                                               		------------------------------------------------------------------------------*/
    17                                               		ram_sequence_item seq_item;
    18                                               		/*------------------------------------------------------------------------------
    19                                               		--  body_task
    20                                               		------------------------------------------------------------------------------*/
    21                                               		task body();
    22              1                          1     			seq_item=ram_sequence_item::type_id::create("seq_item");
    23              1                          1     			start_item(seq_item);
    24              1                          1     			seq_item.rst_n=0;
    25              1                          1     			finish_item(seq_item);
    26                                               		endtask : body
    27                                               	endclass : reset_sequence
    28                                               	/*------------------------------------------------------------------------------
    29                                               	-- in this sequence each 00 is followed by 01 to write many times 
    30                                               	------------------------------------------------------------------------------*/
    31                                               	class many_writes_sequence extends  uvm_sequence#(ram_sequence_item);
    32              1                    ***0***     		`uvm_object_utils(many_writes_sequence);
    32              2                    ***0***     
    32              3                    ***0***     
    32              4                    ***0***     
    32              5                    ***0***     
    32              6                          1     
    32              7                    ***0***     
    32              8                    ***0***     
    32              9                          1     
    32             10                    ***0***     
    33                                               		/*------------------------------------------------------------------------------
    34                                               		--  new
    35                                               		------------------------------------------------------------------------------*/
    36                                               		function  new(string name ="many_writes_sequence");
    37              1                          1     			super.new(name);
    38                                               		endfunction : new
    39                                               		/*------------------------------------------------------------------------------
    40                                               		--  declarations
    41                                               		------------------------------------------------------------------------------*/
    42                                               		ram_sequence_item seq_item;
    43                                               		/*------------------------------------------------------------------------------
    44                                               		--  body_task
    45                                               		------------------------------------------------------------------------------*/
    46                                               		task body();
    47              1                          1     			seq_item=ram_sequence_item::type_id::create("seq_item");
    48              1                       2000     			repeat (2000) begin
    49              1                       2000     				start_item(seq_item);
    50                                               				assert(seq_item.randomize());
    51                                               			//	seq_item.post_randomize_user();
    52              1                       2000     				finish_item(seq_item);
    53                                               			end
    54              1                          1     			seq_item.writing_constrains.constraint_mode(0);
    55              1                       2000     			repeat (2000) begin
    56              1                       2000     				start_item(seq_item);
    57                                               				assert(seq_item.randomize());
    58                                               			//	seq_item.post_randomize_user();
    59              1                       2000     				finish_item(seq_item);


=================================================================================
=== Instance: /test_pkg
=== Design Unit: work.test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         4         6    40.00%

================================Branch Details================================

Branch Coverage for instance /test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File test_pkg.sv
------------------------------------IF Branch------------------------------------
    35                                         1     Count coming in to IF
    35              1                    ***0***     			if(! uvm_config_db#(virtual ram_interface)::get(this, "", "v_if_1",obj.object_vif ))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***     				`uvm_error("test build phase","cannot get virual interface");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              1                          1     				`uvm_info("run phase _1 ","before any seq",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    47                                         1     Count coming in to IF
    47              1                          1     				`uvm_info("run phase _1","after reset sequence",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    49                                         1     Count coming in to IF
    49              1                          1     				`uvm_info("run phase _1 ","after first sequence",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      19        16         3    84.21%

================================Statement Details================================

Statement Coverage for instance /test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File test_pkg.sv
    1                                                package test_pkg;
    2                                                	import uvm_pkg::*;
    3                                                	`include "uvm_macros.svh"
    4                                                	import sequence_pkg::*;
    5                                                	import environment_pkg::*;
    6                                                	import sequence_item_pkg::*;
    7                                                	import config_object_pkg::*;
    8                                                	class ram_test extends  uvm_test;
    9               1                    ***0***     		`uvm_component_utils(ram_test);
    9               2                    ***0***     
    9               3                          4     
    10                                               		/*------------------------------------------------------------------------------
    11                                               		--  new
    12                                               		------------------------------------------------------------------------------*/
    13                                               		function  new(string name ="test",uvm_component parent =null);
    14              1                          1     			super.new(name,parent);
    15                                               		endfunction : new
    16                                               		/*------------------------------------------------------------------------------
    17                                               		-- declarations  
    18                                               		------------------------------------------------------------------------------*/
    19                                               		reset_sequence seq_1;
    20                                               		many_writes_sequence seq_2;
    21                                               		//write_read_sequence seq_3;
    22                                               		ram_environment env;
    23                                               		ram_config_object obj;
    24                                               		virtual ram_interface test_vif;
    25                                               		/*------------------------------------------------------------------------------
    26                                               		--build_phase   
    27                                               		------------------------------------------------------------------------------*/
    28                                               		function void build_phase(uvm_phase phase);
    29              1                          1     			super.build_phase(phase);
    30              1                          1     			seq_1=reset_sequence::type_id::create("seq_1");
    31              1                          1     			seq_2=many_writes_sequence::type_id::create("seq_2");
    32                                               			//seq_3=write_read_sequence::type_id::create("seq_3");
    33              1                          1     			obj=ram_config_object::type_id::create("obj");
    34              1                          1     			env=ram_environment::type_id::create("env",this);
    35                                               			if(! uvm_config_db#(virtual ram_interface)::get(this, "", "v_if_1",obj.object_vif ))
    36              1                    ***0***     				`uvm_error("test build phase","cannot get virual interface");
    37              1                          1     			uvm_config_db#(ram_config_object)::set(this, "*", "CFG", obj);
    38                                               		endfunction : build_phase
    39                                               		/*------------------------------------------------------------------------------
    40                                               		--run_phase   
    41                                               		------------------------------------------------------------------------------*/
    42                                               		task run_phase(uvm_phase phase);
    43              1                          1     			super.run_phase(phase);
    44              1                          1     			phase.raise_objection(this);
    45              1                          1     				`uvm_info("run phase _1 ","before any seq",UVM_MEDIUM);
    46              1                          1     				seq_1.start(env.agent.sequencer);
    47              1                          1     				`uvm_info("run phase _1","after reset sequence",UVM_MEDIUM);
    48              1                          1     				seq_2.start(env.agent.sequencer);
    49              1                          1     				`uvm_info("run phase _1 ","after first sequence",UVM_MEDIUM);
    50                                               			//	seq_3.start(env.agent.sequencer);
    51                                               			//	`uvm_info("run phase _1 ","after second sequence",UVM_MEDIUM);
    52              1                          1     			phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /coverage_pkg/ram_coverage_collector/cvr_gp     100.00%        100          -    Covered              
    covered/total bins:                                    28         28          -                      
    missing/total bins:                                     0         28          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint reset                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_rst                                       84          1          -    Covered              
        bin ONE_rst                                      3917          1          -    Covered              
    Coverpoint RX_valid                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_rx                                       714          1          -    Covered              
        bin ONE_rx                                       3286          1          -    Covered              
    Coverpoint TX_valid                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_tx                                      3487          1          -    Covered              
        bin ONE_tx                                        514          1          -    Covered              
    Coverpoint Din                                    100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO_din                                     1222          1          -    Covered              
        bin ONE_din                                      1579          1          -    Covered              
        bin TWO_din                                       673          1          -    Covered              
        bin THREE_din                                     526          1          -    Covered              
    Coverpoint Dout                                   100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_values                                   4001          1          -    Covered              
    Coverpoint Address_write                          100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_range_of_addr                            1222          1          -    Covered              
    Coverpoint Address_read                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_range_of_addr                             673          1          -    Covered              
    Cross rx_valid_with_din                           100.00%        100          -    Covered              
        covered/total bins:                                 8          8          -                      
        missing/total bins:                                 0          8          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <THREE_din,ONE_rx>                        420          1          -    Covered              
            bin <TWO_din,ONE_rx>                          525          1          -    Covered              
            bin <ONE_din,ONE_rx>                         1365          1          -    Covered              
            bin <ZERO_din,ONE_rx>                         976          1          -    Covered              
            bin <THREE_din,ZERO_rx>                       106          1          -    Covered              
            bin <TWO_din,ZERO_rx>                         148          1          -    Covered              
            bin <ONE_din,ZERO_rx>                         214          1          -    Covered              
            bin <ZERO_din,ZERO_rx>                        246          1          -    Covered              
    Cross reading_with_tx_valid                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_tx,THREE_din>                        514          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignored_low_tx                    3486                     -    Occurred             
            ignore_bin ignored_two_din                    673                     -    Occurred             
            ignore_bin ignored_one_din                   1579                     -    Occurred             
            ignore_bin ignored_zero_din                  1222                     -    Occurred             
    Cross rst_rx_din_11                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_rx,THREE_din,ONE_rst>                411          1          -    Covered              
            bin <ZERO_rx,THREE_din,ONE_rst>               103          1          -    Covered              
            bin <ONE_rx,THREE_din,ZERO_rst>                 9          1          -    Covered              
            bin <ZERO_rx,THREE_din,ZERO_rst>                3          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignored_two_din                    673                     -    Occurred             
            ignore_bin ignored_one_din                   1579                     -    Occurred             
            ignore_bin ignored_zero_din                  1222                     -    Occurred             
    Cross dout_with_tx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <ONE_tx,all_values>                       514          1          -    Covered              
            bin <ZERO_tx,all_values>                     3487          1          -    Covered              

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/sequence_pkg/many_writes_sequence/body/#ublk#50851543#48/immed__50
                     sequence_pkg.sv(50)                0          1
/sequence_pkg/many_writes_sequence/body/#ublk#50851543#55/immed__57
                     sequence_pkg.sv(57)                0          1

Total Coverage By Instance (filtered view): 81.99%

